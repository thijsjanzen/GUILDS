[{"path":"https://thijsjanzen.github.io/GUILDS/articles/Walkthrough.html","id":"guilds-vignette","dir":"Articles","previous_headings":"","what":"Guilds Vignette","title":"Walkthrough","text":"Welcome vignette GUILDS. GUILDS R package aimed providing user easy use functions help dealing Unified Neutral Theory Biodiversity Biogeography. specifically, package bundles together sampling functions Neutral Model including multiple guilds differ dispersal ability (Janzen et al. 2015), Etienne sampling formula standard neutral model. Furthermore, package contains functions generate artificial datasets, calculate expected abundances.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/articles/Walkthrough.html","id":"the-standard-neutral-model","dir":"Articles","previous_headings":"","what":"The standard neutral model","title":"Walkthrough","text":"generate data standard neutral model, can make use function generate.ESF, ESF stands Etienne Sampling Formula. generate.ESF makes use urn scheme described Etienne (2005), avid reader can also find details Etienne Sampling Formula. ESF combines universal biodiversity number theta, universal dispersal number . Typically, migration rate bit easier interpret, make use first, convert , generate data: package now generated nice species abundance distribution. Using function `preston_plot can visualize abundance distribution  can even better, using function expected.SAD can calculate expected number individuals per species. Furthermore, can easily add plot:  can clearly see simulated abundance distribution closely matches expected distribution (black line), although stochastic nature simulation caused small deviations. Using Etienne Sampling Formula can now estimate theta m, using maximum likelihood. already know real values (values used simulate data), can nicely crosscheck whether Etienne Sampling Formula yields good results. start maximum likelihood three different starting points, compare convergence. Regardless starting point, recover parameter estimates close real values theta = 100 m = 0.1 .","code":"set.seed(42) theta <- 100 m <- 0.1 J <- 10000 I <- m * (J - 1) / (1 - m) abund <- generate.ESF(theta, I, J) abund ##   [1] 875 238 212 177 176 172 159 158 149 145 144 126 124 122 117 112 111 110 ##  [19] 110 109 108 108 106 101  99  95  93  92  86  80  80  79  78  77  76  75 ##  [37]  70  68  66  63  62  60  60  59  59  58  57  57  56  56  55  54  54  53 ##  [55]  52  51  51  50  48  47  46  46  45  44  44  43  43  43  43  42  42  41 ##  [73]  40  40  39  39  39  37  37  37  36  36  35  35  34  34  34  33  33  31 ##  [91]  31  30  30  30  30  30  29  29  28  28  28  27  26  26  26  26  26  26 ## [109]  26  25  25  24  24  24  24  24  24  23  22  22  22  21  21  21  21  20 ## [127]  20  20  20  20  20  20  20  19  19  19  19  18  18  18  18  17  17  17 ## [145]  17  17  17  16  16  16  16  16  16  15  15  15  15  15  14  14  14  13 ## [163]  13  13  12  12  12  12  12  12  12  11  11  11  11  11  11  10  10  10 ## [181]  10  10   9   9   9   9   9   9   9   9   8   8   8   8   8   8   8   8 ## [199]   8   8   8   8   8   7   7   7   7   7   7   7   7   7   7   7   7   6 ## [217]   6   6   6   6   6   6   6   5   5   5   5   5   5   5   5   5   5   5 ## [235]   5   5   5   5   5   4   4   4   4   4   4   4   4   4   4   4   4   4 ## [253]   4   4   4   4   4   4   3   3   3   3   3   3   3   3   3   3   3   3 ## [271]   3   3   3   3   3   3   3   3   3   3   2   2   2   2   2   2   2   2 ## [289]   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2 ## [307]   2   2   2   2   1   1   1   1   1   1   1   1   1   1   1   1   1   1 ## [325]   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 ## [343]   1 preston_plot(abund) abund.expect <- expected.SAD(theta, m, J) preston_plot(abund, abund.expect) LL1 <- maxLikelihood.ESF(init_vals = c(theta, m), abund) LL2 <- maxLikelihood.ESF(init_vals = c(100, 0.01), abund) LL3 <- maxLikelihood.ESF(init_vals = c(10, 0.5), abund) LL1$par ## [1] 102.0395279   0.1159656 LL2$par ## [1] 101.9890695   0.1150816 LL3$par ## [1] 102.0662586   0.1158091"},{"path":"https://thijsjanzen.github.io/GUILDS/articles/Walkthrough.html","id":"dispersal-guilds","dir":"Articles","previous_headings":"","what":"Dispersal Guilds","title":"Walkthrough","text":"guilds model, described Janzen et al. (2015), asks slightly different question standard neutral model. species abundances look two guilds species, guilds differ dispersal ability? Imagine instance forest, tree species disperse using wind-aided seed dispersal, tree species disperse using animal-aided seed dispersal. model assumes two guilds share local community, metacommunity, share speciation dynamics (e.g. theta). Dispersal different however, contrast standard neutral model, infer migration rates, asses dispersal ability: guilds model postulates migration (m) product dispersal ability species (alpha) species’ frequency metacommunity (p).","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/articles/Walkthrough.html","id":"conditioning-on-guild-size","dir":"Articles","previous_headings":"Dispersal Guilds","what":"Conditioning on Guild size","title":"Walkthrough","text":"paper, show order parameter estimation work reliably, condition sampling formula’s guild size. package also contains sampling formula’s without guild size, order user reproduce train thought, focus solely situations conditioned sampling formula’s guild size, hence assume user knows number individuals per guild. , without verder ado, let’s simulate data apply relevant sampling formula’s. start simulating data using “D0” model, assumes differences dispersal ability guilds (e.g. guilds model reduces standard neutral model) , can calculate expected distributions, visualize distributions. time however, small part calculation expected distribution can treated analytically, done via means simulation, larger number replicates means accurate expected distribution. use low number replicates computational reasons.  , set size Guild X 8000 individuals, size Guild Y 2000 individuals. Preston plots notice indeed Guild X contains species, apart , many striking differences (assumed equal dispersal course!) Now data, can apply guilds’ sampling formula, see whether can accruately infer parameter values. see maximum likelihood algorithm accurately infers value alpha, gets relatively close inferring right value theta. want infer rate migration, , case, also apply standard neutral model (, differences dispersal, rendering guilds construction obsolete): Using ESF, find slightly higher estimate theta (notice mean two estimates becomes really close value put ), find higher value m.","code":"set.seed(666) theta <- 200 alpha_x <- 0.1 J <- 10000 J_x <- 8000 J_y <- J - J_x  abund <- generate.Guilds.Cond(theta, alpha_x, alpha_x, J_x, J_y) abund.expected <- expected.SAD.Guilds.Conditional(theta, alpha_x, alpha_x,                                                   J_x, J_y, n_replicates = 5)  par(mfrow = c(1, 2)) preston_plot(abund$guildX, abund.expected$guildX, main = \"Guild X\") preston_plot(abund$guildY, abund.expected$guildY, main = \"Guild Y\") LL <- maxLikelihood.Guilds.Conditional(init_vals = c(theta, alpha_x),                                         model = \"D0\",                                        sadx = abund$guildX,                                         sady = abund$guildY,                                        verbose = FALSE) LL$par ## [1] 180.6348705   0.0995815 LL1 <- maxLikelihood.ESF(init_vals = c(theta, alpha_x),                          abund = c(abund$guildX, abund$guildY),                           verbose = FALSE) LL1$par ## [1] 246.0613192   0.2132893"},{"path":"https://thijsjanzen.github.io/GUILDS/articles/Walkthrough.html","id":"guilds-model-with-differences-in-dispersal","dir":"Articles","previous_headings":"Dispersal Guilds","what":"Guilds model with differences in dispersal","title":"Walkthrough","text":", happens assume differences dispersal? Let’s, fun, assume two guilds (guild X Y), guild X much bigger, species guild X much lower dispersal ability: generates following dataset:  Clearly, now strong differences community distributions: larger guild much broader distribution, much less singletons smaller guild. , can use maximum likelihood infer parameters data: Maximum likelihood estimation shows can accurately infer underlying parameters. Furthermore, can test whether model assuming differences dispersal guilds better explains data, model without. also fitting model without differences data, compare estimated likelihoods: honest comparison, correct extra parameter (alpha_y) “D1” model, calculating AIC value: AIC D1 model lower, indicating much better fit - expected. concludes vignette. Go , find abundance data check whether data guild structure! , use ESF, can come potential guild structure, apply conditional guilds sampling formula! Don’t forget apply model , without differences dispersal ability, order verify guilds really differ dispersal ability!","code":"set.seed(666 + 42) theta <- 200 alpha_x <- 0.01 alpha_y <- 0.1 J <-  1000 J_x <- 800 J_y <- J - J_x  abund <- generate.Guilds.Cond(theta, alpha_x, alpha_y, J_x, J_y) abund.expected <- expected.SAD.Guilds.Conditional(theta, alpha_x, alpha_y,                                                   J_x, J_y, n_replicates = 5)  par(mfrow = c(1, 2)) preston_plot(abund$guildX, abund.expected$guildX, main = \"Guild X\") preston_plot(abund$guildY, abund.expected$guildY, main = \"Guild Y\") ML1 <- maxLikelihood.Guilds.Conditional(init_vals = c(theta, alpha_x, alpha_y),                                         model = \"D1\",                                        sadx = abund$guildX, sady = abund$guildY,                                        verbose = FALSE) ML2 <- maxLikelihood.Guilds.Conditional(init_vals = c(theta, alpha_x),                                         model = \"D0\",                                        sadx = abund$guildX, sady = abund$guildY,                                        verbose = FALSE) AIC_D1 <- 2 * 3 - 2 * -ML1$value AIC_D0 <- 2 * 2 - 2 * -ML2$value AIC_D1 ## [1] 153.4068 AIC_D0 ## [1] 194.3186"},{"path":"https://thijsjanzen.github.io/GUILDS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thijs Janzen. Author, maintainer. Bart Haegeman. Contributor. Franck Jabot. Contributor. Jerome Chave. Contributor.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Janzen, T., Haegeman, B., & Etienne, R. S. (2015). sampling formula ecological communities multiple dispersal syndromes. Journal Theoretical Biology, 374, 94-106 https://doi.org/10.1016/j.jtbi.2015.03.018","code":"@Article{,   title = {A sampling formula for ecological communities with multiple dispersal syndromes},   author = {Thijs Janzen and Bart Haegeman and Rampal S. Etienne},   journal = {Journal of Theoretical Biology},   year = {2015},   volume = {374},   pages = {94--106},   doi = {10.1016/j.jtbi.2015.03.018}, }"},{"path":"https://thijsjanzen.github.io/GUILDS/index.html","id":"guilds-","dir":"","previous_headings":"","what":"Implementation of Sampling Formulas for the Unified Neutral Model of Biodiversity and Biogeography, with or without Guild Structure","title":"Implementation of Sampling Formulas for the Unified Neutral Model of Biodiversity and Biogeography, with or without Guild Structure","text":"GUILDS package combines range sampling formulas unified neutral model biogeography biodiversity. Alongside sampling formulas, includes methods perform maximum likelihood optimization sampling formulas, methods generate data given neutral model, methods estimate expected species abundance distribution. Sampling formulas included GUILDS package Etienne Sampling Formula (Etienne 2005), guild sampling formula, guilds assumed differ dispersal ability (Janzen et al. 2015), guilds sampling formula conditioned guild size (Janzen et al. 2015). Furthermore contains functions generate data given guilds model, without conditioning guild size. C++ Code obtain Sterling numbers first kind adopted Tetame program Jabot et al. (2008).","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/index.html","id":"updates","dir":"","previous_headings":"","what":"Updates","title":"Implementation of Sampling Formulas for the Unified Neutral Model of Biodiversity and Biogeography, with or without Guild Structure","text":"added CITATION file cleaned C++ code Cleaner README Vignettes Extend support M1 processors sizeof(long double) < 16 Comply R_CHECK_LENGTH_0_LOGIC2 GUILDS now GitHub: https://github.com/thijsjanzen/GUILDS Wrote code tests check code integrity, code coverage >95 Modified maximum likelihood functions take account theta_x = theta_y = theta / 2 added function plot preston-style plots Updated User manual fixed memory leak issues adding extra vector access checks fixed memory leak issues introducing vectors KDA code renamed logLik avoid shadowing function logLik package stats removed malloc header KDA code","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Implementation of Sampling Formulas for the Unified Neutral Model of Biodiversity and Biogeography, with or without Guild Structure","text":"Janzen, T., Haegeman B., Etienne, R.S. (2015) sampling formula communities multiple dispersal syndromes. Journal Theoretical Biology 374: 94-106 Etienne, R.S. (2005). new sampling formula neutral biodiversity. Ecology Letters, 8(3), 253-260. Jabot, F., Etienne, R.S., & Chave, J. (2008). Reconciling neutral community models environmental filtering: theory empirical test. Oikos 117: 1308-1320","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/GUILDS-internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Guilds functions — GUILDS-internal","title":"Internal Guilds functions — GUILDS-internal","text":"Internal Guilds functions","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/GUILDS-internal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal Guilds functions — GUILDS-internal","text":"called user","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/GUILDS-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Package implementing the Guilds sampling formula for the Neutral Theory of Biodiversity — GUILDS-package","title":"Package implementing the Guilds sampling formula for the Neutral Theory of Biodiversity — GUILDS-package","text":"GUILDS package contains number sampling formula's Etienne Sampling Formula (Etienne 2005), GUILDS sampling formula (Janzen et al. 2015) GUILDS sampling formula conditioned guild Size (Janzen et al. 2015). Furthermore contains functions generate data given guilds model, without conditioning guild size. C++ Code obtain Sterling numbers first kind adopted Tetame program Jabot et al. (2008).  Updates  Version 1.4   : Cleaner README Vignettes  Version 1.4   : Extend support M1 processors sizeof(long double) < 16  Version 1.4   : Comply _R_CHECK_LENGTH_0_LOGIC2_  Version 1.3   : GUILDS now GitHub: https://github.com/thijsjanzen/GUILDS Version 1.3   : Wrote code tests check code integrity, code coverage >95%  Version 1.3   : Modified maximum likelihood functions take account theta_x = theta_y = theta / 2  Version 1.3   : Added plotting function plot Preston style plots  Version 1.2.1 : Updated User manual Version 1.2   : fixed memory leak issues adding extra vector access checks  Version 1.2   : fixed memory leak issues introducing vectors KDA code Version 1.2   : renamed logLik avoid shadowing function logLik package stats Version 1.1   : removed malloc header KDA code","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/GUILDS-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Package implementing the Guilds sampling formula for the Neutral Theory of Biodiversity — GUILDS-package","text":"Thijs Janzen Maintainer: Thijs Janzen <thijsjanzen@gmail.com>","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/GUILDS-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Package implementing the Guilds sampling formula for the Neutral Theory of Biodiversity — GUILDS-package","text":"Janzen, T., Haegeman B., Etienne, R.S. (2015) sampling formula communities multiple dispersal syndromes. Journal Theoretical Biology 374: 94-106 Etienne, R.S. (2005). new sampling formula neutral biodiversity. Ecology Letters, 8(3), 253-260. Jabot, F., Etienne, R.S., & Chave, J. (2008). Reconciling neutral community models environmental filtering: theory empirical test. Oikos 117: 1308-1320","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.Guilds.Conditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y, conditional on the size of guild X, Jx and the size of guild Y, Jy. — expected.SAD.Guilds.Conditional","title":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y, conditional on the size of guild X, Jx and the size of guild Y, Jy. — expected.SAD.Guilds.Conditional","text":"function estimates expected species abundance distribution guilds using guilds model, provided theta, alpha_x, alpha_y J. expected species abundance distribution approximated first drawing px equation 9. abundance distributions two guilds independent, distributions can now obtained using equation 6 Etienne Alonso 2005. drawing beta distribution equation 3 inherently stochastic, function returns average specified number replicates.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.Guilds.Conditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y, conditional on the size of guild X, Jx and the size of guild Y, Jy. — expected.SAD.Guilds.Conditional","text":"","code":"expected.SAD.Guilds.Conditional(theta, alpha_x, alpha_y, Jx, Jy, n_replicates = 100)"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.Guilds.Conditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y, conditional on the size of guild X, Jx and the size of guild Y, Jy. — expected.SAD.Guilds.Conditional","text":"theta Fundamental biodiversity number theta alpha_x Dispersal ability guild X alpha_y Dispersal ability guild Y Jx Total number individuals guild X Jy Total number individuals guild Y n_replicates Number replicates use estimate abundance distributions.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.Guilds.Conditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y, conditional on the size of guild X, Jx and the size of guild Y, Jy. — expected.SAD.Guilds.Conditional","text":"guildX Vector containing mean abundances species Guild X, binned log2 bins guildY Vector containing mean abundances species Guild Y, binned log2 bins","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.Guilds.Conditional.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y, conditional on the size of guild X, Jx and the size of guild Y, Jy. — expected.SAD.Guilds.Conditional","text":"Etienne, R.S., & Alonso, D. (2005). dispersal-limited sampling theory species alleles. Ecology Letters, 8(100), 1147-1156.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.Guilds.Conditional.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y, conditional on the size of guild X, Jx and the size of guild Y, Jy. — expected.SAD.Guilds.Conditional","text":"Thijs Janzen & Bart Haegeman","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.Guilds.Conditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y, conditional on the size of guild X, Jx and the size of guild Y, Jy. — expected.SAD.Guilds.Conditional","text":"","code":"SADs <- expected.SAD.Guilds.Conditional(theta = 42,                                           alpha_x = 0.01,                                           alpha_y = 0.1,                                           Jx = 100,                                           Jy = 200,                                           n_replicates = 3)    par(mfrow=c(1,2))   barplot(SADs$guildX, names.arg=0:(length(SADs$guildX) - 1),     xlab = \"Number of individuals (log2)\",     ylab = \"Number of Species\", main = \"Guild X\" )   barplot(SADs$guildY, names.arg = 0:(length(SADs$guildY) - 1),     xlab = \"Number of individuals (log2)\",     ylab = \"Number of Species\", main = \"Guild Y\" )"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.Guilds.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y and J. — expected.SAD.Guilds","title":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y and J. — expected.SAD.Guilds","text":"function estimates expected species abundance distribution guilds using guilds model, provided theta, alpha_x, alpha_y J. expected species abundance distribution approximated first drawing px beta distribution (equation 4 Janzen et al. 2015). , guild sizes drawn using equation 3 Janzen et al. 2015. abundance distributions two guilds independent, distributions can now obtained using equation 6 Etienne Alonso 2005. drawing beta distribution equation 3 inherently stochastic, function returns average specified number replicates.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.Guilds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y and J. — expected.SAD.Guilds","text":"","code":"expected.SAD.Guilds(theta, alpha_x, alpha_y, J, n_replicates = 100)"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.Guilds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y and J. — expected.SAD.Guilds","text":"theta Fundamental biodiversity number theta alpha_x Dispersal ability guild X alpha_y Dispersal ability guild Y J Total number individuals local community, e.g. J = Jx + Jy n_replicates Number replicates use estimate abundance distributions.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.Guilds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y and J. — expected.SAD.Guilds","text":"guildX Vector containing mean abundances species Guild X, binned log2 bins guildY Vector containing mean abundances species Guild Y, binned log2 bins","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.Guilds.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y and J. — expected.SAD.Guilds","text":"Etienne, R.S., & Alonso, D. (2005). dispersal-limited sampling theory species alleles. Ecology Letters, 8(100), 1147-1156.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.Guilds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y and J. — expected.SAD.Guilds","text":"Thijs Janzen & Bart Haegeman","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.Guilds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the expected species abundance distribution of both guilds using the guilds model, provided theta, alpha_x, alpha_y and J. — expected.SAD.Guilds","text":"","code":"SADs <- expected.SAD.Guilds(theta = 42, alpha_x = 0.01, alpha_y = 0.1, J = 1000, n_replicates = 3)   par(mfrow=c(1,2));   barplot(SADs$guildX,names.arg=0:(length(SADs$guildX)-1),     xlab=\"Number of individuals (log2)\",     ylab=\"Number of Species\",main=\"Guild X\" )    barplot(SADs$guildY,names.arg=0:(length(SADs$guildY)-1),     xlab=\"Number of individuals (log2)\",     ylab=\"Number of Species\",main=\"Guild Y\" )"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the expected species abundance distribution of the standard neutral model, given theta, m and J — expected.SAD","title":"Calculate the expected species abundance distribution of the standard neutral model, given theta, m and J — expected.SAD","text":"function calculates expected species abundance distribution standard neutral model given theta, m J, sensu equation 6 Etienne Alonso (2005).","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the expected species abundance distribution of the standard neutral model, given theta, m and J — expected.SAD","text":"","code":"expected.SAD(theta, m, J)"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the expected species abundance distribution of the standard neutral model, given theta, m and J — expected.SAD","text":"theta Fundamental biodiversity number theta m migration parameter J Total number individuals local community","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the expected species abundance distribution of the standard neutral model, given theta, m and J — expected.SAD","text":"vector containing abundances binned log2 bins (sensu Preston).","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the expected species abundance distribution of the standard neutral model, given theta, m and J — expected.SAD","text":"Etienne, R.S., & Alonso, D. (2005). dispersal-limited sampling theory species alleles. Ecology Letters, 8(100), 1147-1156.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the expected species abundance distribution of the standard neutral model, given theta, m and J — expected.SAD","text":"Thijs Janzen & Bart Haegeman","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/expected.SAD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the expected species abundance distribution of the standard neutral model, given theta, m and J — expected.SAD","text":"","code":"SAD <- expected.SAD(theta = 42, m = 0.1, J = 200) barplot(SAD,         names.arg=0:(length(SAD)-1),         xlab=\"Number of individuals (log2)\",         ylab=\"Number of Species\" )"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.ESF.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate community data under the standard neutral model of biodiversity, using the urn scheme as described in Etienne 2005 — generate.ESF","title":"Generate community data under the standard neutral model of biodiversity, using the urn scheme as described in Etienne 2005 — generate.ESF","text":"function generates community data standard neutral model biodiversity, using urn scheme described Etienne 2005","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.ESF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate community data under the standard neutral model of biodiversity, using the urn scheme as described in Etienne 2005 — generate.ESF","text":"","code":"generate.ESF(theta, I, J)"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.ESF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate community data under the standard neutral model of biodiversity, using the urn scheme as described in Etienne 2005 — generate.ESF","text":"theta Fundamental biodiversity number theta Fundamental dispersal number J total number individuals local community","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.ESF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate community data under the standard neutral model of biodiversity, using the urn scheme as described in Etienne 2005 — generate.ESF","text":"Vector containing unlabeled species abundances local community","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.ESF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate community data under the standard neutral model of biodiversity, using the urn scheme as described in Etienne 2005 — generate.ESF","text":"Etienne, R.S. (2005). new sampling formula neutral biodiversity. Ecology Letters, 8(3), 253-260.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.ESF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate community data under the standard neutral model of biodiversity, using the urn scheme as described in Etienne 2005 — generate.ESF","text":"Thijs Janzen & Bart Haegeman","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.ESF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate community data under the standard neutral model of biodiversity, using the urn scheme as described in Etienne 2005 — generate.ESF","text":"","code":"generate.ESF(theta = 42, I = 10, J = 2000) #>  [1] 517 279 270 168 163 110  78  65  52  40  39  31  26  23  22  21  19  16  16 #> [20]  13  11  10   2   2   2   2   1   1   1"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.Guilds.Cond.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Artificial data under the GUILDS model, conditioned on Guild size — generate.Guilds.Cond","title":"Generate Artificial data under the GUILDS model, conditioned on Guild size — generate.Guilds.Cond","text":"Using function possible generate community dataset consisting two separate abundance vectors guild, data generated adhere Guilds model. Data generated conditioned guild size.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.Guilds.Cond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Artificial data under the GUILDS model, conditioned on Guild size — generate.Guilds.Cond","text":"","code":"generate.Guilds.Cond(theta, alpha_x, alpha_y, JX, JY)"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.Guilds.Cond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Artificial data under the GUILDS model, conditioned on Guild size — generate.Guilds.Cond","text":"theta Fundamental Biodiversity Number theta alpha_x Dispersal Ability Guild X alpha_y Dispersal Ability Guild Y JX Total number individuals Guild X JY Total number individuals Guild Y","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.Guilds.Cond.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Artificial data under the GUILDS model, conditioned on Guild size — generate.Guilds.Cond","text":"guildX Vector containing unlabeled abundances species Guild X guildY Vector containing unlabeled abundances species Guild Y","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.Guilds.Cond.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Artificial data under the GUILDS model, conditioned on Guild size — generate.Guilds.Cond","text":"Thijs Janzen","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.Guilds.Cond.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Artificial data under the GUILDS model, conditioned on Guild size — generate.Guilds.Cond","text":"","code":"generate.Guilds.Cond(theta = 200,                      alpha_x = 0.005,                      alpha_y = 0.001,                      JX = 15000,                      JY = 5000); #> $guildX #>   [1] 862 637 579 551 485 462 434 422 422 413 393 369 367 344 309 290 283 282 #>  [19] 272 269 243 220 218 211 207 204 198 179 172 169 166 164 159 159 157 147 #>  [37] 142 139 137 129 120 116 113 112 108  97  87  86  81  80  78  71  66  64 #>  [55]  62  60  57  56  50  49  49  48  46  45  43  43  43  40  39  38  35  34 #>  [73]  34  32  32  32  30  29  28  25  25  24  24  23  22  21  19  17  17  16 #>  [91]  16  16  16  16  15  15  14  13  13  13  12  12  12  12  11  11  10  10 #> [109]  10   9   9   9   8   8   8   7   7   7   7   7   7   7   7   6   6   6 #> [127]   6   6   5   5   5   5   4   4   3   3   3   3   3   3   3   3   3   3 #> [145]   2   2   2   2   2   2   1   1   1   1   1   1   1   1   1   1   1   1 #> [163]   1   1   1 #>  #> $guildY #>  [1] 1162  652  427  283  255  251  245  180  162  129  112  103  102   93   86 #> [16]   75   75   71   53   50   37   35   34   30   27   27   23   22   18   17 #> [31]   16   15   14   14   12   12   10   10    9    9    7    5    4    4    3 #> [46]    2    2    2    2    2    1    1    1    1    1    1    1    1    1    1 #>"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.Guilds.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Artificial data under the GUILDS model — generate.Guilds","title":"Generate Artificial data under the GUILDS model — generate.Guilds","text":"Using function possible generate community dataset consisting two separate abundance vectors guild, data generated adhere Guilds model.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.Guilds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Artificial data under the GUILDS model — generate.Guilds","text":"","code":"generate.Guilds(theta, alpha_x, alpha_y, J)"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.Guilds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Artificial data under the GUILDS model — generate.Guilds","text":"theta Fundamental Biodiversity Number theta alpha_x Dispersal Ability Guild X alpha_y Dispersal Ability Guild Y J Total number individuals local community (e.g. J_X + J_Y).","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.Guilds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Artificial data under the GUILDS model — generate.Guilds","text":"guildX Vector containing unlabeled abundances species Guild X guildY Vector containing unlabeled abundances species Guild Y","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.Guilds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Artificial data under the GUILDS model — generate.Guilds","text":"Thijs Janzen","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/generate.Guilds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Artificial data under the GUILDS model — generate.Guilds","text":"","code":"generate.Guilds(theta = 200,                 alpha_x = 0.005,                 alpha_y = 0.001,                 J = 10000) #> $guildX #>  [1] 820 733 594 500 495 426 380 365 304 289 254 230 211 207 189 176 172 131 130 #> [20] 101  81  74  74  66  66  66  62  60  46  45  43  38  38  33  32  30  28  24 #> [39]  24  23  22  20  16  15  14  14  12  12  12  12  11  10   9   9   9   9   9 #> [58]   9   8   8   7   7   7   6   6   6   5   5   5   4   4   4   4   4   3   3 #> [77]   3   3   2   2   2   2   2   2   2   1   1   1   1   1   1   1   1   1   1 #> [96]   1   1   1 #>  #> $guildY #>  [1] 695 439 216 157  91  62  50  45  43  26  20  19  17  16  16  16  10   9   8 #> [20]   7   7   3   2   2   1   1   1   1   1   1   1   1   1   1   1 #>"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.ESF.html","id":null,"dir":"Reference","previous_headings":"","what":"Likelihood of the Etienne sampling formula — logLikelihood.ESF","title":"Likelihood of the Etienne sampling formula — logLikelihood.ESF","text":"function calculates likelihood Etienne Sampling Formula, provided abundance data parameter values.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.ESF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood of the Etienne sampling formula — logLikelihood.ESF","text":"","code":"logLikelihood.ESF(theta, m, abund)"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.ESF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likelihood of the Etienne sampling formula — logLikelihood.ESF","text":"theta Parameter value fundamental biodiversity number theta m Parameter value migration abund Vector containing abundance data","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.ESF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likelihood of the Etienne sampling formula — logLikelihood.ESF","text":"Returns LogLikelihood","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.ESF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Likelihood of the Etienne sampling formula — logLikelihood.ESF","text":"Etienne, R.S. (2005). new sampling formula neutral biodiversity. Ecology Letters, 8(3), 253-260.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.ESF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Likelihood of the Etienne sampling formula — logLikelihood.ESF","text":"Thijs Janzen","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.ESF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Likelihood of the Etienne sampling formula — logLikelihood.ESF","text":"","code":"A <- c(1,1,1,3,5,8); #Artificial abundance dataset   LL <- logLikelihood.ESF(theta = 7, m = 0.1, abund = A)"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.Guilds.Conditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Likelihood of the Guilds sampling formula, conditional on guild size — logLikelihood.Guilds.Conditional","title":"Likelihood of the Guilds sampling formula, conditional on guild size — logLikelihood.Guilds.Conditional","text":"function calculates likelihood guilds model, conditional guild size; provided abundance data parameter values.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.Guilds.Conditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood of the Guilds sampling formula, conditional on guild size — logLikelihood.Guilds.Conditional","text":"","code":"logLikelihood.Guilds.Conditional(parameters, model, sadx, sady, verbose = TRUE)"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.Guilds.Conditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likelihood of the Guilds sampling formula, conditional on guild size — logLikelihood.Guilds.Conditional","text":"parameters parameters corresponds vector parameter values depending provided model:  \t\t- model: \"D0\" parameters = c(theta, alpha)  \t\t- model: \"D1\" parameters = c(theta, alpha X, alpha Y) model chosen model calculate likelihood , please note vector parameters contain corresponding parameters right order. user can pick one models: \t\t-  \"D0\"  \t\t-  \"D1\" sadx Species Abundance Distribution guild X sady Species Abundance Distribution guild Y verbose TRUE/FALSE flag, indicates whether intermediate output shown screen","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.Guilds.Conditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likelihood of the Guilds sampling formula, conditional on guild size — logLikelihood.Guilds.Conditional","text":"returns LogLikelihood","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.Guilds.Conditional.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Likelihood of the Guilds sampling formula, conditional on guild size — logLikelihood.Guilds.Conditional","text":"Thijs Janzen","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.Guilds.Conditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Likelihood of the Guilds sampling formula, conditional on guild size — logLikelihood.Guilds.Conditional","text":"","code":"exampleData <- generate.Guilds.Cond(theta = 200,                                     alpha_x = 0.005,                                     alpha_y = 0.001,                                     JX = 1000,                                     JY = 2000) #theta = 200, alpha X = 0.005, alpha Y = 0.001 parametervals <- c(200, 0.005, 0.001) LL = logLikelihood.Guilds.Conditional(parametervals,                                       model=\"D1\",                                       exampleData$guildX,                                       exampleData$guildY,                                       verbose=TRUE) #> Chosen model:  D1  #> Now starting to calculate likelihood of:  #> Theta X = 200  Theta Y = Theta X \t Alpha X = 0.005  Alpha Y = 0.001  #> Likelihood is  -123.2912"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.Guilds.html","id":null,"dir":"Reference","previous_headings":"","what":"Likelihood of the Guilds sampling formula — logLikelihood.Guilds","title":"Likelihood of the Guilds sampling formula — logLikelihood.Guilds","text":"function calculates likelihood guilds model, provided abundance data parameter values.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.Guilds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood of the Guilds sampling formula — logLikelihood.Guilds","text":"","code":"logLikelihood.Guilds(parameters, model, sadx, sady, verbose = TRUE)"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.Guilds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likelihood of the Guilds sampling formula — logLikelihood.Guilds","text":"parameters parameters corresponds vector parameter values depending provided model:  \t\t- model: \"D0\" parameters = c(theta, alpha)  \t\t- model: \"D1\" parameters = c(theta, alpha X, alpha Y) model chosen model calculate likelihood , please note vector parameters contain corresponding parameters right order. user can pick one models: \t\t-  \"D0\"  \t\t-  \"D1\" sadx Species Abundance Distribution guild X sady Species Abundance Distribution guild Y verbose TRUE/FALSE flag, indicates whether intermediate output shown screen","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.Guilds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likelihood of the Guilds sampling formula — logLikelihood.Guilds","text":"returns LogLikelihood","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.Guilds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Likelihood of the Guilds sampling formula — logLikelihood.Guilds","text":"Thijs Janzen","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/logLikelihood.Guilds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Likelihood of the Guilds sampling formula — logLikelihood.Guilds","text":"","code":"exampleData <- generate.Guilds(theta = 200,                                alpha_x = 0.005,                                alpha_y = 0.001,                                J = 1000) #theta = 200, alpha X = 0.005, alpha Y = 0.001 parametervals <- c(200, 0.005, 0.001) LL = logLikelihood.Guilds(parametervals,                           model = \"D1\",                           exampleData$guildX,                           exampleData$guildY,                           verbose = TRUE) #> Likelihood is  -43.62391"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.ESF.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximization of the loglikelihood given the standard Neutral Model, using the Etienne Sampling Formula — maxLikelihood.ESF","title":"Maximization of the loglikelihood given the standard Neutral Model, using the Etienne Sampling Formula — maxLikelihood.ESF","text":"function computes maximum likelihood estimates parameters Neutral model, using Etienne Sampling Formula","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.ESF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximization of the loglikelihood given the standard Neutral Model, using the Etienne Sampling Formula — maxLikelihood.ESF","text":"","code":"maxLikelihood.ESF(init_vals, abund, verbose = FALSE)"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.ESF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximization of the loglikelihood given the standard Neutral Model, using the Etienne Sampling Formula — maxLikelihood.ESF","text":"init_vals vector initial starting values, format c(theta, m) abund Vector containing record number individuals per species verbose TRUE/FALSE flag, indicates whether intermediate output shown screen","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.ESF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximization of the loglikelihood given the standard Neutral Model, using the Etienne Sampling Formula — maxLikelihood.ESF","text":"output list containing following: par vector containing parameter values maximum likelihood c(theta, m) fvalues likelihood corresponding parameter values conv gives message convergence optimization; conv = 0 means convergence","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.ESF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Maximization of the loglikelihood given the standard Neutral Model, using the Etienne Sampling Formula — maxLikelihood.ESF","text":"Etienne, R.S. (2005). new sampling formula neutral biodiversity. Ecology Letters, 8(3), 253-260.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.ESF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Maximization of the loglikelihood given the standard Neutral Model, using the Etienne Sampling Formula — maxLikelihood.ESF","text":"Thijs Janzen","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.ESF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximization of the loglikelihood given the standard Neutral Model, using the Etienne Sampling Formula — maxLikelihood.ESF","text":"","code":"A <- c(1, 1, 1, 3, 5, 8)   maxLikelihood.ESF( c(7, 0.1), abund = A) #> $par #> [1] 15.5921293  0.1688449 #>  #> $value #> [1] 5.270295 #>"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.Guilds.Conditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximization of the loglikelihood under the Guilds Model, conditioned on guild size. — maxLikelihood.Guilds.Conditional","title":"Maximization of the loglikelihood under the Guilds Model, conditioned on guild size. — maxLikelihood.Guilds.Conditional","text":"function computes maximum likelihood estimates parameters guilds model, conditioned guild size.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.Guilds.Conditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximization of the loglikelihood under the Guilds Model, conditioned on guild size. — maxLikelihood.Guilds.Conditional","text":"","code":"maxLikelihood.Guilds.Conditional(init_vals, model, sadx, sady, verbose = TRUE)"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.Guilds.Conditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximization of the loglikelihood under the Guilds Model, conditioned on guild size. — maxLikelihood.Guilds.Conditional","text":"init_vals init_vals corresponds vector parameter values start Maxmimum Likelihood algorithm, depending provided model:  \t\t- model: \"D0\" parameters = c(theta, alpha)  \t\t- model: \"D1\" parameters = c(theta, alpha X, alpha Y) model chosen model calculate maximum likelihood , please note vector parameters contain corresponding parameters right order. user can pick one models: \t\t-  \"D0\"  \t\t-  \"D1\" sadx Species Abundance Distribution guild X sady Species Abundance Distribution guild Y verbose TRUE/FALSE flag, indicates whether intermediate output shown screen","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.Guilds.Conditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximization of the loglikelihood under the Guilds Model, conditioned on guild size. — maxLikelihood.Guilds.Conditional","text":"output list containing following: par vector containing parameter values maximum likelihood value likelihood corresponding parameter values counts Number function evaluations required convergence -2:  invalid input \t\t\t-1:  number maximum function evaluations exceeded  \t\t\t 0:  success: convergence  \t\t\t 1:  limit machine precision reached message character string giving diagnostic message optimizer, hessian Hessian matrix (implemented package)","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.Guilds.Conditional.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Maximization of the loglikelihood under the Guilds Model, conditioned on guild size. — maxLikelihood.Guilds.Conditional","text":"Thijs Janzen","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.Guilds.Conditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximization of the loglikelihood under the Guilds Model, conditioned on guild size. — maxLikelihood.Guilds.Conditional","text":"","code":"theta = 20 alpha = 0.1 initParams <- c(theta, alpha) maxLikelihood.Guilds.Conditional(initParams,                                  model = \"D0\",                                  sadx  = 1:20,                                  sady  = 1:20,                                  verbose = TRUE) #> $par #> [1] 10.5442506  0.1094336 #>  #> $value #> [1] 49.37634 #>"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.Guilds.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximization of the loglikelihood under the Guilds Model. — maxLikelihood.Guilds","title":"Maximization of the loglikelihood under the Guilds Model. — maxLikelihood.Guilds","text":"function computes maximum likelihood estimates parameters guilds model.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.Guilds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximization of the loglikelihood under the Guilds Model. — maxLikelihood.Guilds","text":"","code":"maxLikelihood.Guilds(init_vals, model = \"D0\",                      sadx, sady, verbose = FALSE)"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.Guilds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximization of the loglikelihood under the Guilds Model. — maxLikelihood.Guilds","text":"init_vals init_vals corresponds vector parameter values start Maxmimum Likelihood algorithm, depending provided model:  \t\t- model: \"D0\" parameters = c(theta, alpha)  \t\t- model: \"D1\" parameters = c(theta, alpha X, alpha Y) model chosen model calculate maximum likelihood , please note vector parameters contain corresponding parameters right order. user can pick one models: \t\t-  \"D0\"  \t\t-  \"D1\" sadx Species Abundance Distribution guild X sady Species Abundance Distribution guild Y verbose TRUE/FALSE flag, indicates whether intermediate output shown screen","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.Guilds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximization of the loglikelihood under the Guilds Model. — maxLikelihood.Guilds","text":"output list containing following: par vector containing parameter values maximum likelihood value likelihood corresponding parameter values counts Number function evaluations required convergence -2:  invalid input \t\t\t-1:  number maximum function evaluations exceeded  \t\t\t 0:  success: convergence  \t\t\t 1:  limit machine precision reached message character string giving diagnostic message optimizer, hessian Hessian matrix (implemented package)","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.Guilds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Maximization of the loglikelihood under the Guilds Model. — maxLikelihood.Guilds","text":"Thijs Janzen","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/maxLikelihood.Guilds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximization of the loglikelihood under the Guilds Model. — maxLikelihood.Guilds","text":"","code":"if (FALSE) { # \\dontrun{   J <- 10000    theta <- 100   alpha_x <- 0.1    simul_data <- generate.Guilds(theta, alpha_x, alpha_x, J)    #initial parameters for the D0 model c(theta,alpha)   LL <- maxLikelihood.Guilds(init_vals = c(theta, alpha_x),                              model = \"D0\",                              sadx  = simul_data$guildX,                              sady  = simul_data$guildY) } # }"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/preston_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Barplot in Preston style of an abundance dataset — preston_plot","title":"Barplot in Preston style of an abundance dataset — preston_plot","text":"function first sorts abundances octaves, plots resulting distribution.","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/preston_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barplot in Preston style of an abundance dataset — preston_plot","text":"","code":"preston_plot(abund, expected, ...)"},{"path":"https://thijsjanzen.github.io/GUILDS/reference/preston_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barplot in Preston style of an abundance dataset — preston_plot","text":"abund vector containing number individuals per species expected vector containing expected number species per octave ... graphical arguments can passed barplot()","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/preston_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Barplot in Preston style of an abundance dataset — preston_plot","text":"Thijs Janzen","code":""},{"path":"https://thijsjanzen.github.io/GUILDS/reference/preston_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barplot in Preston style of an abundance dataset — preston_plot","text":"","code":"theta = 10   m = 0.1   J = 1000   I = m * (J - 1) / (1 - m)      abund <- generate.ESF(theta, I, J)   par(mfrow = c(1,2))   preston_plot(abund)   abund.expect <- expected.SAD(theta, m, J)   preston_plot(abund, abund.expect)"}]
